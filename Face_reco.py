{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80006d68",
   "metadata": {},
   "outputs": [],
   "source": [
    "import face_recognition\n",
    "import os\n",
    "import cv2\n",
    "\n",
    "KNOWN_FACES_DIR = 'known_faces'\n",
    "TOLERANCE = 0.5 #The lower the tolerance, the more \"strict\" the labels will be\n",
    "FRAME_THICKNESS = 3\n",
    "FONT_THICKNESS = 2\n",
    "MODEL = 'hog'  #'hog', other one can be 'cnn' \n",
    "\n",
    "video=cv2.VideoCapture(\"test.mp4\") # Also can put a video Name\n",
    "#video=cv2.VideoCapture() # Also can put a video Name\n",
    "\n",
    "print('Loading known faces...')\n",
    "known_faces = []\n",
    "known_names = []\n",
    "\n",
    "# Load known faces and their names\n",
    "for name in os.listdir(KNOWN_FACES_DIR):\n",
    "    for filename in os.listdir(f'{KNOWN_FACES_DIR}/{name}'):\n",
    "        image = face_recognition.load_image_file(f'{KNOWN_FACES_DIR}/{name}/{filename}')\n",
    "        encoding = face_recognition.face_encodings(image)[0]\n",
    "        # encoding = pickle.load(open(f\"{name}/{filename}\",\"rb\"))\n",
    "        known_faces.append(encoding)\n",
    "        known_names.append(name)\n",
    "\n",
    "# !!! Caution : Uncomment this only if you want to go for ID numbers \n",
    "# if len (known_names)>0:\n",
    "#     next_id=max =(known_names)+1\n",
    "# else :\n",
    "#     next_id=0\n",
    "\n",
    "print('Processing unknown faces...')\n",
    "counter = 0\n",
    "skip_frames = 5  # Process every 5th frame\n",
    "\n",
    "while True:\n",
    "    ret, image = video.read()\n",
    "    if not ret:\n",
    "        break\n",
    "    \n",
    "    counter += 1\n",
    "    if counter % skip_frames != 0:\n",
    "        continue\n",
    "\n",
    "    # Resize the frame to a smaller size for faster processing\n",
    "    # image = cv2.resize(image, (640, int(image.shape[0] * 640 / image.shape[1])))\n",
    "    # we can do in this way also resize \n",
    "    image = cv2.resize(image, (1280, 720))\n",
    "\n",
    "    locations = face_recognition.face_locations(image, model=MODEL)\n",
    "    encodings = face_recognition.face_encodings(image, locations)\n",
    "    \n",
    "    for face_encoding, face_location in zip(encodings, locations):\n",
    "\n",
    "        # We use compare_faces (but might use face_distance as well)\n",
    "        # Returns array of True/False values in order of passed known_faces\n",
    "        results = face_recognition.compare_faces(known_faces, face_encoding, TOLERANCE)\n",
    "\n",
    "        # Since order is being preserved, we check if any face was found then grab index\n",
    "        # then label (name) of first matching known face withing a tolerance\n",
    "        match = 'Unknown'\n",
    "        if True in results:  # If at least one is true, get a name of first of found labels\n",
    "            match = known_names[results.index(True)]\n",
    "            print(f'match found - {match} ')\n",
    "\n",
    "        # !!! Caution : Again uncomment only if go to print ID\n",
    "        # else:\n",
    "        #     match =str(next_id)\n",
    "        #     next_id+=1\n",
    "        #     known_names.append(match)\n",
    "        #     known_faces.append(face_encoding)\n",
    "        #     os.mkdir(f\"{KNOWN_FACES_DIR}/{match}\")\n",
    "        #     pickle.dump(face_encoding,open(f\"{KNOWN_FACES_DIR}/{match}/{match}-{int(time.time())}.pkl\",\"wb\"))\n",
    "\n",
    "\n",
    "        # Each location contains positions in order: top, right, bottom, left\n",
    "        top_left = (face_location[3], face_location[0])\n",
    "        bottom_right = (face_location[1], face_location[2])\n",
    "        color = [0,255,0]\n",
    "        cv2.rectangle(image, top_left, bottom_right, color, FRAME_THICKNESS)# Paint frame\n",
    "        # Now we need smaller, filled grame below for a name\n",
    "        # This time we use bottom in both corners - to start from bottom and move 50 pixels down\n",
    "        top_left = (face_location[3], face_location[2])\n",
    "        bottom_right = (face_location[1], face_location[2] + 22)\n",
    "        cv2.rectangle(image, top_left, bottom_right, color, cv2.FILLED)\n",
    "        cv2.putText(image, match, (face_location[3]+10, face_location[2]+15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), FONT_THICKNESS)\n",
    "    \n",
    "    cv2.imshow(\"Frame\", image)\n",
    "    if cv2.waitKey(1) & 0xFF==ord(\"q\"):\n",
    "        break\n",
    "\n",
    "cv2.destroyAllWindows()\n",
    "video.release()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
